// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String  @unique
  first_name String?
  last_name  String?
  full_name  String? @default("")
  avatar_src String?
  avatar_alt String? @default("")

  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt @db.Timestamptz(3)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid

  workspace_members WorkspaceMember[]

  documents_created Document[]  @relation("DocumentAuthor")
  owned_workspaces  Workspace[] @relation("WorkspaceOwner")

  @@map("users")
}

model Workspace {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  slug        String  @unique
  owner_id    String  @db.Uuid

  avatar_src String?
  avatar_alt String? @default("")

  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt @db.Timestamptz(3)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid

  owner             User              @relation("WorkspaceOwner", fields: [owner_id], references: [id], onDelete: Cascade)
  members           WorkspaceMember[]
  documents         Document[]
  document_versions DocumentVersion[]

  @@index([owner_id])
  @@map("workspaces")
}

model WorkspaceMember {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String        @db.Uuid
  workspace_id Int
  role         WorkspaceRole @default(EDITOR)

  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt @db.Timestamptz(3)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid
  invited_by String?   @db.Uuid // user id of the inviter

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@unique([user_id, workspace_id])
  @@index([user_id])
  @@index([workspace_id])
  @@map("workspace_members")
}

enum WorkspaceRole {
  OWNER
  EDITOR
  VIEWER
}

model Document {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id     Int
  author_id        String    @db.Uuid
  title            String
  slug             String    @unique
  markdown_content String? // Markdown content of the document
  // content      Json // Yjs JSON snapshot
  created_at       DateTime  @default(now()) @db.Timestamptz(3)
  updated_at       DateTime? @updatedAt @db.Timestamptz(3)
  created_by       String?   @db.Uuid
  updated_by       String?   @db.Uuid

  is_public Boolean? @default(false)

  workspace Workspace         @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  author    User              @relation("DocumentAuthor", fields: [author_id], references: [id], onDelete: Cascade)
  versions  DocumentVersion[]

  @@index([workspace_id])
  @@index([author_id])
  @@map("documents")
}

model DocumentVersion {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  doc_id     String    @db.Uuid
  // snapshot   String? // history snapshot of the raw document
  // history snapshot of Yjs document
  created_at DateTime  @default(now()) @db.Timestamptz(3)
  updated_at DateTime? @updatedAt @db.Timestamptz(3)
  created_by String?   @db.Uuid
  updated_by String?   @db.Uuid

  workspace_id Int
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  document     Document  @relation(fields: [doc_id], references: [id], onDelete: Cascade)

  @@index([doc_id])
  @@map("document_versions")
}
